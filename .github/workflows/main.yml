name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types:
      - created

  workflow_dispatch:

jobs:
  lint:
    name: lint and style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff
      - name: Black style check
        run: |
          black --check .
      - name: Lint with ruff
        run: |
          ruff check .

  build_0:
    name: h5py3 numpy 1 tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.12"]
        h5py-version: ["3.10", "3.11"]
        numpy-version: ["1"]
    steps:
    - uses: actions/checkout@v4
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-tests
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-h5py${{matrix.h5py_version}}-numpy${{matrix.numpy_version}}-${{env.TODAY}}"
        create-args: >-
          python=${{ matrix.python-version }}
          pip
          pytest
          wheel
          h5py=${{ matrix.h5py-version }}
          netCDF4
          numpy=${{ matrix.numpy-version }}
    - name: Install h5netcdf
      run: |
        python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv
    - name: Test with pytest
      run: |
        pytest -v --durations=0 h5netcdf/tests/

  build_0a:
    name: h5py3 numpy 2 tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        h5py-version: ["3.11"]
        numpy-version: ["2"]
    steps:
    - uses: actions/checkout@v4
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-tests
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-h5py${{matrix.h5py_version}}-numpy${{matrix.numpy_version}}-${{env.TODAY}}"
        create-args: >-
          python=${{ matrix.python-version }}
          pip
          pytest
          wheel
          h5py=${{ matrix.h5py-version }}
          netCDF4
          numpy=${{ matrix.numpy-version }}
    - name: Install h5netcdf
      run: |
        python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv
    - name: Test with pytest
      run: |
        pytest -v --durations=0 h5netcdf/tests/

  build_1:
    name: h5py3/h5pyd tests
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        numpy-version: ["1", "2"]
    steps:
    - uses: actions/checkout@v4
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-tests
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-numpy${{matrix.numpy_version}}-h5pyd-${{env.TODAY}}"
        create-args: >-
          python=${{ matrix.python-version }}
          pip
          pytest
          wheel
          h5py
          netCDF4
          numpy=${{ matrix.numpy-version }}
    - name: Install h5netcdf
      run: |
        python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv
        python -m pip install git+https://github.com/HDFGroup/hsds.git@v0.8.0
        python -m pip install git+https://github.com/HDFGroup/h5pyd.git
    - name: Test with pytest
      run: |
        pytest -v --durations=0 h5netcdf/tests/

  build_2:
    name: netCDF4 nightly test
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        numpy-version: ["1", "2"]
    steps:
    - uses: actions/checkout@v4
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-tests
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-numpy${{matrix.numpy_version}}-netcdf4_nightly-${{env.TODAY}}"
        create-args: >-
          python=${{ matrix.python-version }}
          pip
          pytest
          wheel
          h5py
          libnetcdf
          cftime
          numpy=${{ matrix.numpy-version }}
    - name: Install netCDF4 from GitHub
      run: python -m pip install git+https://github.com/Unidata/netcdf4-python
    - name: Install h5netcdf
      run: |
        python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv
    - name: Test with pytest
      run: |
        pytest -v --durations=0 h5netcdf/tests/

  build_3:
    name: xarray nightly test
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        numpy-version: ["1", "2"]
    steps:
    - uses: actions/checkout@v4
      with:
        repository: "pydata/xarray"
        fetch-depth: 0
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-tests
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-numpy${{matrix.numpy_version}}-xarray_nightly-${{env.TODAY}}"
        create-args: >-
          python=${{ matrix.python-version }}
          dask
          h5py
          netCDF4
          packaging
          pandas
          pip
          pytest
          wheel
          numpy=${{ matrix.numpy-version }}
    - name: Install xarray
      run: |
        python -m pip install --no-deps .
    - name: Install h5netcdf
      run: |
        python -m pip install --no-deps --ignore-installed --no-cache-dir -vvv \
          git+https://github.com/h5netcdf/h5netcdf.git@${{ github.ref }}
    - name: Test with pytest
      run: |
        python -m pytest -v --durations=0 -k "H5NetCDF"

  sphinx_doc:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-name: h5netcdf-docs
        cache-environment: true
        cache-environment-key: "${{runner.os}}-${{runner.arch}}-py${{env.PYTHON_VERSION}}-docs-${{env.TODAY}}"
        create-args: >-
          python=3.12
          pip
          pytest
          wheel
          h5py
          netCDF4
          sphinx
          sphinx-book-theme>=0.3.2
    - name: Install h5netcdf
      run: |
        python -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv
    - name: Build HTML
      run: |
        cd doc
        make html
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: html-doc
        path: doc/_build/html
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      # this uploads only on releases
      if: github.event_name == 'release'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: doc/_build/html

  upload-pypi:
    if: github.event_name == 'release'
    needs: [lint, build_0, build_0a, sphinx_doc]
    name: deploy to pypi
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel twine
      - name: Package and Upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m build
          twine upload dist/*
